/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LandMangment,
  LandMangmentInterface,
} from "../../../contracts/mangmentContract.sol/LandMangment";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimCurrentRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimPastRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
    ],
    name: "getCurrentRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
    ],
    name: "getPastRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lands",
    outputs: [
      {
        internalType: "address",
        name: "minterContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "assestOnwer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "TokenID",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "created_at",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "CurrentRewards",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pastRewards",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestOnwer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_TokenID",
        type: "uint256",
      },
    ],
    name: "setLand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_assestHolder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_currentRewards",
        type: "uint256",
      },
    ],
    name: "updateCurrentReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610f628061010d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639a551117116100665780639a5511171461014d5780639b85f6661461017d578063b1757eb6146101ad578063b2e14f8d146101c9578063f2fde38b146101f95761009e565b80632baabf8c146100a357806333b22760146100bf5780635f0d5647146100f5578063715018a6146101255780638da5cb5b1461012f575b600080fd5b6100bd60048036038101906100b89190610a0c565b610215565b005b6100d960048036038101906100d49190610a5f565b610327565b6040516100ec9796959493929190610ac5565b60405180910390f35b61010f600480360381019061010a9190610b34565b6103b6565b60405161011c9190610b74565b60405180910390f35b61012d6104b3565b005b6101376104c7565b6040516101449190610b8f565b60405180910390f35b61016760048036038101906101629190610a5f565b6104f0565b6040516101749190610b74565b60405180910390f35b61019760048036038101906101929190610b34565b610541565b6040516101a49190610b74565b60405180910390f35b6101c760048036038101906101c29190610b34565b61063e565b005b6101e360048036038101906101de9190610a5f565b610698565b6040516101f09190610b74565b60405180910390f35b610213600480360381019061020e9190610a5f565b6106e9565b005b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160020181905550338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160030160006101000a81548160ff02191690831515021790555042816004018190555060c881600501819055506000816006018190555050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16908060040154908060050154908060060154905087565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610405856104f0565b90506000811161044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190610c2d565b60405180910390fd5b8381101561048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610cbf565b60405180910390fd5b838260060160008282546104a19190610d0e565b92505081905550809250505092915050565b6104bb61076c565b6104c560006107ea565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060060154915050919050565b60008061054d84610698565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082116105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90610dda565b60405180910390fd5b83821015610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610cbf565b60405180910390fd5b8381600501600082825461062c9190610d0e565b92505081905550819250505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061068a836108ae565b818160050181905550505050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050154915050919050565b6106f161076c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790610e6c565b60405180910390fd5b610769816107ea565b50565b61077461096b565b73ffffffffffffffffffffffffffffffffffffffff166107926104c7565b73ffffffffffffffffffffffffffffffffffffffff16146107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90610ed8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816005015411610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90610dda565b60405180910390fd5b600081600501549050808260060160008282546109559190610ef8565b9250508190555060008260050181905550505050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a382610978565b9050919050565b6109b381610998565b81146109be57600080fd5b50565b6000813590506109d0816109aa565b92915050565b6000819050919050565b6109e9816109d6565b81146109f457600080fd5b50565b600081359050610a06816109e0565b92915050565b600080600060608486031215610a2557610a24610973565b5b6000610a33868287016109c1565b9350506020610a44868287016109c1565b9250506040610a55868287016109f7565b9150509250925092565b600060208284031215610a7557610a74610973565b5b6000610a83848285016109c1565b91505092915050565b610a9581610998565b82525050565b610aa4816109d6565b82525050565b60008115159050919050565b610abf81610aaa565b82525050565b600060e082019050610ada600083018a610a8c565b610ae76020830189610a8c565b610af46040830188610a9b565b610b016060830187610ab6565b610b0e6080830186610a9b565b610b1b60a0830185610a9b565b610b2860c0830184610a9b565b98975050505050505050565b60008060408385031215610b4b57610b4a610973565b5b6000610b59858286016109c1565b9250506020610b6a858286016109f7565b9150509250929050565b6000602082019050610b896000830184610a9b565b92915050565b6000602082019050610ba46000830184610a8c565b92915050565b600082825260208201905092915050565b7f557365722043757272656e746c792068617665206e6f2070617374204361726260008201527f6f6e204372656469742052657761726473000000000000000000000000000000602082015250565b6000610c17603183610baa565b9150610c2282610bbb565b604082019050919050565b60006020820190508181036000830152610c4681610c0a565b9050919050565b7f557365722068617665206c65737320436172626f6e204372656964742074686160008201527f6e20746865206465736972656420616d6f756e742e0000000000000000000000602082015250565b6000610ca9603583610baa565b9150610cb482610c4d565b604082019050919050565b60006020820190508181036000830152610cd881610c9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d19826109d6565b9150610d24836109d6565b9250828203905081811115610d3c57610d3b610cdf565b5b92915050565b7f557365722043757272656e746c792068617665206e6f20436172626f6e20437260008201527f6564697420526577617264732c204f7261636c65206e65656420746f2075706460208201527f61746520757365722043757272656e7420526577617264730000000000000000604082015250565b6000610dc4605883610baa565b9150610dcf82610d42565b606082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e56602683610baa565b9150610e6182610dfa565b604082019050919050565b60006020820190508181036000830152610e8581610e49565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ec2602083610baa565b9150610ecd82610e8c565b602082019050919050565b60006020820190508181036000830152610ef181610eb5565b9050919050565b6000610f03826109d6565b9150610f0e836109d6565b9250828201905080821115610f2657610f25610cdf565b5b9291505056fea2646970667358221220de0539520b861d0a201180fe05bcc85ea6ef10827dbb9ae3e9f54384f5ee586b64736f6c63430008110033";

type LandMangmentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LandMangmentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LandMangment__factory extends ContractFactory {
  constructor(...args: LandMangmentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LandMangment> {
    return super.deploy(overrides || {}) as Promise<LandMangment>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LandMangment {
    return super.attach(address) as LandMangment;
  }
  override connect(signer: Signer): LandMangment__factory {
    return super.connect(signer) as LandMangment__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LandMangmentInterface {
    return new utils.Interface(_abi) as LandMangmentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LandMangment {
    return new Contract(address, _abi, signerOrProvider) as LandMangment;
  }
}
